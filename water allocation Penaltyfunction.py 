
from dimod import BQM
from dwave.system import LeapHybridSampler

# Define the QUBO coefficients
Q = {
    ('xA', 'xA'): 0,
    ('yA', 'yA'): 0,
    ('xB', 'xB'): 0,
    ('yB', 'yB'): 0,
    ('xC', 'xC'): 0,
    ('yC', 'yC'): 0,
    ('xA', 'yA'): 2,
    ('xB', 'yB'): 2,
    ('xC', 'yC'): 2,
}

# Introduce penalty terms for the constraint: each region must have at most one option selected
penalty_coefficient = 10  # Adjust as needed
Q[('xA', 'yA')] += penalty_coefficient
Q[('xB', 'yB')] += penalty_coefficient
Q[('xC', 'yC')] += penalty_coefficient

# Create a Binary Quadratic Model (BQM) from the QUBO coefficients
bqm = BQM.from_qubo(Q)

# Define the sampler
sampler = LeapHybridSampler()

# Solve the BQM
response = sampler.sample(bqm, num_reads=1000)

# Print the results
print("Solutions:")
for sample, energy in response.data(['sample', 'energy']):
    print(sample, "Energy:", energy)